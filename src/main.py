import random, time
import numpy as np
from functools import reduce
from pulp import *
from tabulate import tabulate

from nurses import Problem, Solution
from grasp import SolutionGRASP
from hgrasp import SolutionHGRASP
from lp import SolutionLP

import cProfile

# A big problem (5 minutes working with 4 threads) for CPLEX can be generated by
# using the seed = 1 and the nurses = 100. Metaheuristics theoretically should
# be able to beat this time...

seed = 8
nurses = 25
tries = 10
alpha = 0.1
problems = 10
solved = 0

table = []

while True:
	row = {}
	print('Searching for a feasible problem with seed={} and nurses={}'.format(
		seed, nurses))

	row['seed'] = seed
	row['nurses'] = nurses

	p = Problem(seed, nurses)

	lp = SolutionLP(p, 'nurses')
	solver_params = dict(keepFiles=0, msg=1, timelimit=20)
	solver = CPLEX(**solver_params)
	#solver = GLPK(**solver_params)

	# FIXME: time.clock() doesn't take into account subprocess. The actual
	# solution, using time.time() only computes real time (including other
	# processes and interrupts) not CPU time.
	tic = time.time()
	st = lp.solve(solver)
	t = time.time() - tic
	if not st:
		#print('Solver returned not optimal solution, skipping')
		seed += 1
		continue
	if not lp.is_feasible():
		print('FATAL: Solution not feasible. There is a BUG in LP')
		seed += 1
		continue

	row['lp_obj'] = lp.objective()
	row['lp_t'] = t

	#print('Solution found with seed={}'.format(seed))

	#print('Problem selected')
	#print(p)
	#print('LP solution:')
	#print(lp)

	pr = cProfile.Profile()

	#pr.enable()
	#grasp = SolutionHGRASP(p, 'nurses')
	grasp = SolutionGRASP(p, 'nurses')
	tic = time.clock()
	grasp.solve(alpha)
	t = time.clock() - tic
	#pr.disable()

	#print('GRASP solution')
	#print(grasp)
	if grasp.is_feasible():
		#print('Congratulations! GRASP solution seems valid')
		solved += 1
		row['grasp_obj'] = grasp.objective()
	else:
		row['grasp_obj'] = -1

	row['grasp_t'] = t

	table.append(row)

	seed += 1

	if solved >= problems: break

print(tabulate(table, headers='keys'))

#pr.print_stats(sort='cumtime')

#p = Problem(3)
#s = None
#RUNS = 1
#successful = 0
#for i in range(RUNS):
#	iteration = i+1
#	# Reproducible runs
#	np.random.seed(iteration)
#	p.random()
#	print("Iteration {}/{}".format(iteration, RUNS))
#	s = SolutionLP(p, 'nurses')
#	#s = SolutionGrasp(p, 'nurses')
#	solver_params = dict(keepFiles=0, msg=0)
#
#	# "BECAUSE THERE IS NO CHOICE!"
#
#	#solver = COIN(**solver_params)
#	#solver = CPLEX(**solver_params)
#	solver = GLPK(**solver_params)
#	s.solve(solver)
#	bad = s.check()
#	print("bad = {}".format(bad))
#	#print(p)
#	#s.print()
#		# print(s.solution)
#	#if status == 1:
#		#print('Found')
#	#	successful += 1
#
##print()
